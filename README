============================================================================
WildCAT
Copyright (c) 2004-2005 Universite de Nantes (LINA)
Copyright (c) 2005-2006 France Telecom

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License version 2.1 as published by the Free Software Foundation.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

Contact: Pierre-Charles David <pcdavid@gmail.com>
============================================================================

What is WildCAT?
----------------

WildCAT is a Java toolkit/framework to ease the creation of
context-aware applications. It provides an extensible set of sensors
to gather various kinds of contextual data, which can then be
organized into a structured and dynamic model representing an
application's execution context. Client application can query this
model and register listener to be notified automatically when specific
conditions occur.

WildCAT is a free software distributed under the terms of the GNU
Lesser General Public license and kinldy hosted by ObjectWeb at
http://wildcat.objectweb.org/

Getting the source
------------------

The latest releases are available from the project's website at
http//wildcat.objectweb.org/ 

You can get anonymous access to the very latest state of the source
using CVS at :pserver:anonymous@cvs.forge.objectweb.org/cvsroot/wildcat

Building
--------

WildCAT requires Java 5 (JDK 1.5) to build and run. The build process
uses Ant [1] (tested with 1.6.5), and requires the ANTLR parser generator
tool [2] and the JUnit framework [3]. Both are included in the externals/
folder, but must be made available to Ant. You can either:

1. Install the JARs system-wide (if you have the permissions) in Ant's
   optional tasks directory:

  % cp externals/antlr-2.7.6.jar $ANT_HOME/lib
  % cp externals/junit-4.1.jar $ANT_HOME/lib

2. Install the JARs user-wide:

  % cp externals/antlr-2.7.6.jar $HOME/.ant/lib
  % cp externals/junit-4.1.jar $HOME/.ant/lib

3. Tell Ant where to find the JARs using command-line arguments each
   time you invoke it, e.g.

  % ant -lib externals/antlr-2.7.6.jar:externals/junit-4.1.jar test



Building with Eclipse
---------------------

The project is setup for Eclipse [4], and you can install the ANTLR
Eclipse plugin [5] which provides an editor for ANTLR grammar files
and can be used to regenerate the parser from inside Eclipse
(right-click on the grammar file and select "Compile ANTLR grammar").
The automatic parser generation is disabled by default, as the code
generated by ANTLR triggers a lot of (innocuous) warnings which clutter
the Problems view. These warnings can be disabled with some manual
editing: 

1. Navigate to the org.objectweb.wildcat.standard package in the main
   source folder (src/).
2. Select all the generated Java files (Expression*.java) and do
   "Source > Organize imports."
3. Optionally, do also a "Source > Format" to make it more readable.
4. Annotate the lexer and parser classes (ExpressionsLexer and
   ExpressionsReader) with:
   
     @SuppressWarnings({"unchecked", "unused"})
     
   This tells the compiler not to worry that the generated code uses
   pre-Java 5 collections and declares lots of variables it does not
   actually use.

Authors
-------
Main and currently only author:
- Pierre-Charles David <pcdavid@gmail.com>

References
----------

[1] http://ant.apache.org/
[2] http://antlr.org/
[3] http://junit.org/
[4] http://www.eclipse.org/
[5] http://antlreclipse.sourceforge.net/